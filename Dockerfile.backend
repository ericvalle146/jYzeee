# ================================
# üöÄ DOCKERFILE - JYZE BACKEND
# ================================
# Backend NestJS com APIs e WebSockets

FROM node:18-alpine AS backend-builder

# Instalar depend√™ncias do sistema
RUN apk add --no-cache python3 make g++

# Configurar diret√≥rio de trabalho
WORKDIR /app

# Copiar package.json do backend
COPY backend/package*.json ./

# Instalar depend√™ncias
RUN npm ci --only=production && npm cache clean --force

# Copiar c√≥digo fonte do backend
COPY backend/ .

# Build da aplica√ß√£o
RUN npm run build

# Est√°gio de produ√ß√£o
FROM node:18-alpine AS backend-production

# Instalar depend√™ncias do sistema para produ√ß√£o
RUN apk add --no-cache curl dumb-init

# Criar usu√°rio n√£o-root
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

# Configurar diret√≥rio de trabalho
WORKDIR /app

# Copiar depend√™ncias de produ√ß√£o
COPY --from=backend-builder /app/node_modules ./node_modules
COPY --from=backend-builder /app/dist ./dist
COPY --from=backend-builder /app/package*.json ./

# Ajustar permiss√µes
RUN chown -R nestjs:nodejs /app
USER nestjs

# Expor porta
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Usar dumb-init para melhor gerenciamento de processos
ENTRYPOINT ["dumb-init", "--"]

# Comando para iniciar a aplica√ß√£o
CMD ["node", "dist/main.js"]
