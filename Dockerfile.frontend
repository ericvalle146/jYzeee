# ========================================
# üöÄ DOCKERFILE FRONTEND - REACT/VITE 
# ========================================

# Est√°gio 1: Build da aplica√ß√£o React
FROM node:18-alpine AS builder

WORKDIR /app

# Copiar package files
COPY package*.json ./
COPY pnpm-lock.yaml ./

# Instalar pnpm globalmente
RUN npm install -g pnpm

# Instalar depend√™ncias
RUN pnpm install --frozen-lockfile

# Copiar c√≥digo fonte
COPY . .

# Build da aplica√ß√£o para produ√ß√£o
ENV NODE_ENV=production

# URLs da aplica√ß√£o
ENV VITE_API_URL=https://api.jyze.space
ENV VITE_FRONTEND_URL=https://jyze.space

# Supabase Frontend
ENV VITE_SUPABASE_URL=https://jvwfdcjqrptlpgxqxnmt.supabase.co
ENV VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2d2ZkY2pxcnB0bHBneHF4bm10Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzI3Mjc2NSwiZXhwIjoyMDcyODQ4NzY1fQ.nc3gfOoaqljUACNIa739uZvGifl1O4ADLlRRv0DkXB8

# N8N Webhooks
ENV VITE_WEBHOOK_URL=https://n8n.jyze.space/webhook/interacoes
ENV VITE_WEBHOOK_CRUD_PRODUTOS=https://n8n.jyze.space/webhook/crudProdutos
ENV VITE_WEBHOOK_LINK_URL=https://n8n.jyze.space/webhook/link

# Evolution API (WhatsApp)
ENV VITE_EVOLUTION_API_URL=https://evolution.jyze.space/
ENV VITE_EVOLUTION_API_KEY=b7caaa547bb4c48ec46d127601a81451
ENV VITE_WHATSAPP_INSTANCE_NAME=N8N

RUN pnpm run build

# Est√°gio 2: Servir com Nginx
FROM nginx:alpine

# Instalar supervisor para gerenciar processos
RUN apk add --no-cache supervisor

# Remover configura√ß√£o padr√£o do nginx
RUN rm /etc/nginx/conf.d/default.conf

# Criar diret√≥rio para logs do supervisor
RUN mkdir -p /var/log/supervisor

# Copiar arquivos buildados
COPY --from=builder /app/dist /usr/share/nginx/html

# Configura√ß√£o personalizada do Nginx
COPY <<EOF /etc/nginx/conf.d/jyze.conf
# Configura√ß√£o otimizada para React SPA
server {
    listen 80;
    server_name jyze.space www.jyze.space;
    root /usr/share/nginx/html;
    index index.html;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' https: wss:;" always;

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files \$uri =404;
    }

    # Proxy API requests to backend
    location /api/ {
        proxy_pass https://api.jyze.space/;
        proxy_set_header Host api.jyze.space;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$server_name;
        proxy_redirect off;

        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }

    # Handle React Router (SPA)
    location / {
        try_files \$uri \$uri/ /index.html;
        
        # Cache control for HTML
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Health check
    location /health {
        access_log off;
        return 200 "healthy\\n";
        add_header Content-Type text/plain;
    }
}

# Redirect HTTP to HTTPS (se usando SSL)
server {
    listen 80;
    server_name jyze.space www.jyze.space;
    return 301 https://\$server_name\$request_uri;
}
EOF

# Configura√ß√£o do supervisor
COPY <<EOF /etc/supervisor/conf.d/supervisord.conf
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:nginx]
command=nginx -g "daemon off;"
stdout_logfile=/var/log/supervisor/nginx.log
stderr_logfile=/var/log/supervisor/nginx.log
autorestart=true
priority=10

[unix_http_server]
file=/var/run/supervisor.sock

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface
EOF

# Criar script de entrada
COPY <<EOF /docker-entrypoint.sh
#!/bin/sh

echo "üöÄ Iniciando Frontend JYZE..."
echo "üì± URL: https://jyze.space"
echo "üîó API: https://api.jyze.space"
echo "üì¶ Build: \$(date)"

# Iniciar supervisor
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
EOF

RUN chmod +x /docker-entrypoint.sh

# Expor porta
EXPOSE 80 443

# Labels para metadados
LABEL maintainer="JYZE Team"
LABEL version="1.0.0"
LABEL description="Frontend React/Vite para JYZE Delivery"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

# Entrada
ENTRYPOINT ["/docker-entrypoint.sh"]
