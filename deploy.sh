#!/bin/bash

# ========================================
# üöÄ SCRIPT DE DEPLOY JYZE DELIVERY VPS
# ========================================

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Vari√°veis
PROJECT_NAME="jyze-delivery"
COMPOSE_FILE="docker-compose.yml"
ENV_FILE=".env"
BACKUP_DIR="/var/backups/jyze"
LOG_FILE="/var/log/jyze-deploy.log"

# Fun√ß√£o para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

error() {
    echo -e "${RED}[ERRO] $1${NC}"
    echo "[ERRO] $1" >> "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}[AVISO] $1${NC}"
    echo "[AVISO] $1" >> "$LOG_FILE"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
    echo "[INFO] $1" >> "$LOG_FILE"
}

# Verificar se est√° rodando como root
check_root() {
    if [ "$EUID" -eq 0 ]; then
        warning "Rodando como root. Recomendado usar um usu√°rio n√£o-root."
    fi
}

# Verificar depend√™ncias
check_dependencies() {
    log "üîç Verificando depend√™ncias..."
    
    command -v docker >/dev/null 2>&1 || { error "Docker n√£o est√° instalado!"; exit 1; }
    command -v docker-compose >/dev/null 2>&1 || { error "Docker Compose n√£o est√° instalado!"; exit 1; }
    command -v git >/dev/null 2>&1 || { error "Git n√£o est√° instalado!"; exit 1; }
    
    log "‚úÖ Todas as depend√™ncias est√£o instaladas"
}

# Criar diret√≥rios necess√°rios
create_directories() {
    log "üìÅ Criando diret√≥rios necess√°rios..."
    
    sudo mkdir -p /var/log/jyze/{frontend,backend}
    sudo mkdir -p /var/lib/jyze/{backend,print-queue}
    sudo mkdir -p "$BACKUP_DIR"
    
    # Ajustar permiss√µes
    sudo chown -R $USER:$USER /var/log/jyze /var/lib/jyze
    sudo chmod -R 755 /var/log/jyze /var/lib/jyze
    
    log "‚úÖ Diret√≥rios criados"
}

# Verificar e criar arquivo .env
check_env_file() {
    log "üîß Configurando arquivo de ambiente..."
    
    # Sempre recriar o .env com as configura√ß√µes corretas
    if [ -f "env.example" ]; then
        log "üìã Criando .env a partir do env.example..."
        cp env.example .env
    else
        log "üìã Criando .env com configura√ß√µes padr√£o..."
        cat > .env << 'EOF'
# ========================================
# üöÄ JYZE DELIVERY - CONFIGURA√á√ÉO VPS
# ========================================

# üåê AMBIENTE
NODE_ENV=production
PORT=3002

# üóÑÔ∏è BANCO DE DADOS (SUPABASE) - OBRIGAT√ìRIO
SUPABASE_URL=https://jvwfdcjqrptlpgxqxnmt.supabase.co
SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2d2ZkY2pxcnB0bHBneHF4bm10Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzI3Mjc2NSwiZXhwIjoyMDcyODQ4NzY1fQ.nc3gfOoaqljUACNIa739uZvGifl1O4ADLlRRv0DkXB8

# üîê IMPRESS√ÉO SSH - OBRIGAT√ìRIO PARA IMPRESS√ÉO
SSH_USER=eric
SSH_HOST=192.168.3.5
SSH_PASSWORD=eqrwiecr
PRINTER_NAME=5808L-V2024

# üåê CORS E URLs - OBRIGAT√ìRIO
CORS_ORIGIN=https://jyze.space
FRONTEND_URL=https://jyze.space
BACKEND_URL=https://api.jyze.space

# üìä LOGS - OPCIONAL
LOG_LEVEL=info
ENABLE_LOGS=true

# ========================================
# üéØ FRONTEND - VARI√ÅVEIS VITE
# ========================================

# üóÑÔ∏è Supabase Frontend
VITE_SUPABASE_URL=https://jvwfdcjqrptlpgxqxnmt.supabase.co
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2d2ZkY2pxcnB0bHBneHF4bm10Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzI3Mjc2NSwiZXhwIjoyMDcyODQ4NzY1fQ.nc3gfOoaqljUACNIa739uZvGifl1O4ADLlRRv0DkXB8

# ü§ñ Chat Assistente (N8N)
VITE_WEBHOOK_URL=https://n8n.jyze.space/webhook/interacoes

# üì¶ CRUD Produtos (N8N)
VITE_WEBHOOK_CRUD_PRODUTOS=https://n8n.jyze.space/webhook/crudProdutos

# üì± Evolution API (WhatsApp)
VITE_EVOLUTION_API_URL=https://evolution.jyze.space/
VITE_EVOLUTION_API_KEY=b7caaa547bb4c48ec46d127601a81451
VITE_WHATSAPP_INSTANCE_NAME=N8N

# üîó Webhook para Links P√∫blicos
VITE_WEBHOOK_LINK_URL=https://n8n.jyze.space/webhook/link

# üåê URLs da Aplica√ß√£o
VITE_API_URL=https://api.jyze.space
VITE_FRONTEND_URL=https://jyze.space
EOF
    fi
    
    # Verificar vari√°veis essenciais
    source "$ENV_FILE"
    
    [ -z "$SUPABASE_URL" ] && { error "SUPABASE_URL n√£o configurada no .env!"; exit 1; }
    [ -z "$SUPABASE_KEY" ] && { error "SUPABASE_KEY n√£o configurada no .env!"; exit 1; }
    [ -z "$SSH_PASSWORD" ] && { warning "SSH_PASSWORD n√£o configurada - impress√£o pode n√£o funcionar!"; }
    
    log "‚úÖ Arquivo .env configurado automaticamente"
    log "üîê SSH: ${SSH_USER}@${SSH_HOST} ‚Üí ${PRINTER_NAME}"
    log "üåê URLs: ${FRONTEND_URL} ‚Üí ${BACKEND_URL}"
}

# Fazer backup dos dados
backup_data() {
    log "üíæ Fazendo backup dos dados..."
    
    BACKUP_FILE="$BACKUP_DIR/jyze-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
    
    if [ -d "/var/lib/jyze" ]; then
        sudo tar -czf "$BACKUP_FILE" /var/lib/jyze /var/log/jyze 2>/dev/null || true
        log "‚úÖ Backup salvo em: $BACKUP_FILE"
    else
        info "Nenhum dado para backup encontrado"
    fi
}

# Atualizar c√≥digo
update_code() {
    log "üì• Atualizando c√≥digo..."
    
    if [ -d ".git" ]; then
        git fetch origin
        git reset --hard origin/main
        log "‚úÖ C√≥digo atualizado via Git"
    else
        warning "N√£o √© um reposit√≥rio Git - pulando atualiza√ß√£o"
    fi
}

# Build das imagens
build_images() {
    log "üî® Fazendo build das imagens Docker..."
    
    docker-compose build --no-cache --parallel
    
    log "‚úÖ Build conclu√≠do"
}

# Verificar sa√∫de dos servi√ßos
check_health() {
    log "üè• Verificando sa√∫de dos servi√ßos..."
    
    # Aguardar servi√ßos iniciarem
    sleep 30
    
    # Verificar backend
    if curl -f -s http://localhost:3002/printer/status >/dev/null; then
        log "‚úÖ Backend est√° saud√°vel"
    else
        error "‚ùå Backend n√£o est√° respondendo!"
        docker-compose logs backend | tail -20
        return 1
    fi
    
    # Verificar frontend
    if curl -f -s http://localhost/health >/dev/null; then
        log "‚úÖ Frontend est√° saud√°vel"
    else
        error "‚ùå Frontend n√£o est√° respondendo!"
        docker-compose logs frontend | tail -20
        return 1
    fi
    
    log "‚úÖ Todos os servi√ßos est√£o saud√°veis"
}

# Deploy principal
deploy() {
    log "üöÄ Iniciando deploy do JYZE Delivery..."
    
    check_root
    check_dependencies
    create_directories
    check_env_file
    backup_data
    update_code
    
    # Parar servi√ßos existentes
    log "‚èπÔ∏è Parando servi√ßos existentes..."
    docker-compose down || true
    
    # Limpar imagens antigas
    log "üßπ Limpando imagens antigas..."
    docker system prune -f || true
    
    build_images
    
    # Iniciar servi√ßos
    log "‚ñ∂Ô∏è Iniciando servi√ßos..."
    docker-compose up -d
    
    check_health
    
    log "üéâ Deploy conclu√≠do com sucesso!"
    log "üì± Frontend: https://jyze.space"
    log "üîó Backend: https://api.jyze.space"
    log "üìä Logs: docker-compose logs -f"
}

# Parar servi√ßos
stop() {
    log "‚èπÔ∏è Parando todos os servi√ßos..."
    docker-compose down
    log "‚úÖ Servi√ßos parados"
}

# Iniciar servi√ßos
start() {
    log "‚ñ∂Ô∏è Iniciando servi√ßos..."
    docker-compose up -d
    check_health
    log "‚úÖ Servi√ßos iniciados"
}

# Reiniciar servi√ßos
restart() {
    log "üîÑ Reiniciando servi√ßos..."
    docker-compose restart
    check_health
    log "‚úÖ Servi√ßos reiniciados"
}

# Ver logs
logs() {
    local service=${1:-""}
    if [ -n "$service" ]; then
        docker-compose logs -f "$service"
    else
        docker-compose logs -f
    fi
}

# Status dos servi√ßos
status() {
    log "üìä Status dos servi√ßos:"
    docker-compose ps
    
    echo ""
    log "üíæ Uso de espa√ßo:"
    docker system df
    
    echo ""
    log "üè• Health checks:"
    check_health || true
}

# Limpeza do sistema
cleanup() {
    log "üßπ Limpando sistema..."
    
    docker-compose down
    docker system prune -af --volumes
    docker volume prune -f
    
    log "‚úÖ Limpeza conclu√≠da"
}

# Rollback para backup anterior
rollback() {
    log "‚è™ Fazendo rollback..."
    
    LATEST_BACKUP=$(ls -t $BACKUP_DIR/jyze-backup-*.tar.gz 2>/dev/null | head -1)
    
    if [ -z "$LATEST_BACKUP" ]; then
        error "Nenhum backup encontrado para rollback!"
        exit 1
    fi
    
    log "üì¶ Restaurando backup: $LATEST_BACKUP"
    
    docker-compose down
    sudo tar -xzf "$LATEST_BACKUP" -C / 2>/dev/null || true
    docker-compose up -d
    
    check_health
    log "‚úÖ Rollback conclu√≠do"
}

# Atualiza√ß√£o r√°pida (sem rebuild)
quick_update() {
    log "‚ö° Atualiza√ß√£o r√°pida..."
    
    update_code
    docker-compose pull
    docker-compose up -d
    check_health
    
    log "‚úÖ Atualiza√ß√£o r√°pida conclu√≠da"
}

# Menu de ajuda
show_help() {
    echo "üöÄ JYZE Delivery - Script de Deploy"
    echo ""
    echo "Uso: $0 [COMANDO]"
    echo ""
    echo "Comandos dispon√≠veis:"
    echo "  deploy          Deploy completo (padr√£o)"
    echo "  start           Iniciar servi√ßos"
    echo "  stop            Parar servi√ßos"
    echo "  restart         Reiniciar servi√ßos"
    echo "  status          Mostrar status dos servi√ßos"
    echo "  logs [servi√ßo]  Mostrar logs (frontend|backend)"
    echo "  cleanup         Limpar containers e volumes"
    echo "  rollback        Voltar para backup anterior"
    echo "  quick-update    Atualiza√ß√£o r√°pida sem rebuild"
    echo "  health          Verificar sa√∫de dos servi√ßos"
    echo "  help            Mostrar esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  $0 deploy"
    echo "  $0 logs backend"
    echo "  $0 status"
}

# Main
case "${1:-deploy}" in
    deploy)
        deploy
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        status
        ;;
    logs)
        logs "$2"
        ;;
    cleanup)
        cleanup
        ;;
    rollback)
        rollback
        ;;
    quick-update)
        quick_update
        ;;
    health)
        check_health
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        error "Comando desconhecido: $1"
        show_help
        exit 1
        ;;
esac
