import { API_CONFIG } from '@/config/api';
import { Order } from '../types/orders';
import { printLayoutService } from './printLayoutService';
import { PrintLayoutConfig } from '../types/printer';
import { CustomLayoutService } from './customLayoutService';

export interface SystemPrinter {
  id: string;
  name: string;
  status: 'online' | 'offline' | 'inactive' | 'error';
  isDefault: boolean;
  type: 'system' | 'usb' | 'thermal';
  devicePath?: string;
  description?: string;
  connection?: string;
  canActivate?: boolean;
}

export interface PrintResult {
  success: boolean;
  message: string;
  printerId?: string;
  error?: string;
}

export interface PrinterStatus {
  success: boolean;
  totalPrinters: number;
  activePrinters: number;
  defaultPrinter?: string;
  systemInfo: any;
}

class UnifiedPrinterService {
  private readonly apiUrl: string;

  constructor() {
    this.apiUrl = API_CONFIG.BACKEND_API;
  }

  /**
   * üîç DETECTAR TODAS AS IMPRESSORAS DO SISTEMA
   */
  async detectPrinters(): Promise<SystemPrinter[]> {
    try {
      // console.log('üîç Detectando todas as impressoras do sistema...');
      
      const response = await fetch(`${this.apiUrl}/printer/detect`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Erro na detec√ß√£o: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        // console.log(`‚úÖ ${result.printers.length} impressoras detectadas:`, result.printers);
        return result.printers;
      } else {
        console.error('‚ùå Falha na detec√ß√£o:', result.message);
        return [];
      }

    } catch (error) {
      console.error('‚ùå Erro ao detectar impressoras:', error);
      return [];
    }
  }

  /**
   * ‚ö° ATIVAR IMPRESSORA INATIVA COM DIAGN√ìSTICO
   */
  async activatePrinter(printerId: string): Promise<PrintResult> {
    try {
      // console.log(`‚ö° [Activate] Tentando ativar impressora: ${printerId}`);
      
      const response = await fetch(`${this.apiUrl}/printer/activate/${printerId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [Activate] Erro HTTP ${response.status}:`, errorText);
        throw new Error(`Erro HTTP ${response.status}: ${errorText}`);
      }

      const result = await response.json();
      
      if (result.success) {
        // console.log(`‚úÖ [Activate] Impressora ativada: ${result.message}`);
      } else {
        console.error(`‚ùå [Activate] Falha na ativa√ß√£o:`, result);
      }

      return result;

    } catch (error) {
      console.error('‚ùå Erro ao ativar impressora:', error);
      return {
        success: false,
        message: 'Erro de comunica√ß√£o na ativa√ß√£o',
        error: error.message
      };
    }
  }

  /**
   * üñ®Ô∏è IMPRIMIR PEDIDO COM LAYOUT DIN√ÇMICO
   */
  async printOrder(printerId: string, orderData: Order, customLayoutText?: string, layoutId?: string): Promise<PrintResult> {
    try {
      // console.log(`üñ®Ô∏è Imprimindo pedido ${orderData.id} na impressora ${printerId}`);

      // Gerar texto de impress√£o usando layout din√¢mico
      const rawPrintText = customLayoutText || this.generateDynamicPrintText(orderData, layoutId);
      
      // üßπ SANITIZA√á√ÉO FINAL: Remover acentos e sequ√™ncia indesejada
      const printText = this.sanitizePrintText(rawPrintText, orderData.id);
      
      // console.log('üìÑ Texto para impress√£o (layout din√¢mico):', printText);

      const response = await fetch(`${this.apiUrl}/printer/print`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          printerId,
          orderData,
          printText
        }),
      });

      if (!response.ok) {
        throw new Error(`Erro na impress√£o: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        // console.log(`‚úÖ Pedido impresso: ${result.message}`);
      } else {
        console.error(`‚ùå Falha na impress√£o: ${result.message}`);
      }

      return result;

    } catch (error) {
      console.error('‚ùå Erro ao imprimir pedido:', error);
      return {
        success: false,
        message: 'Erro de comunica√ß√£o na impress√£o',
        error: error.message
      };
    }
  }

  /**
   * üß™ TESTAR IMPRESSORA COM DIAGN√ìSTICO DETALHADO
   */
  async testPrint(printerId: string): Promise<PrintResult> {
    try {
      // console.log(`üß™ [Test] Iniciando teste da impressora: ${printerId}`);
      
      // Primeiro, verificar se a impressora existe
      const printers = await this.detectPrinters();
      const printer = printers.find(p => p.id === printerId);
      
      if (!printer) {
        console.error(`‚ùå [Test] Impressora n√£o encontrada: ${printerId}`);
        return {
          success: false,
          message: `Impressora ${printerId} n√£o encontrada`,
          error: 'PRINTER_NOT_FOUND'
        };
      }

      // console.log(`üìã [Test] Impressora encontrada:`, {
      //   name: printer.name,
      //   status: printer.status,
      //   type: printer.type,
      //   canActivate: printer.canActivate
      // });

      // Se impressora est√° inativa, retornar erro em vez de ativar automaticamente
      if (printer.status === 'inactive') {
        console.warn(`‚ö†Ô∏è [Test] Impressora inativa: ${printer.name}`);
        return {
          success: false,
          message: `Impressora ${printer.name} est√° inativa. Use o bot√£o 'Ativar' para habilit√°-la manualmente antes de testar.`,
          error: 'PRINTER_INACTIVE'
        };
      }

      // Executar teste de impress√£o
      // console.log(`üñ®Ô∏è [Test] Executando teste de impress√£o...`);
      const response = await fetch(`${this.apiUrl}/printer/test/${printerId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå [Test] Erro HTTP ${response.status}:`, errorText);
        throw new Error(`Erro HTTP ${response.status}: ${errorText}`);
      }

      const result = await response.json();
      
      if (result.success) {
        // console.log(`‚úÖ [Test] Teste realizado com sucesso: ${result.message}`);
      } else {
        console.error(`‚ùå [Test] Falha no teste:`, result);
      }

      return result;

    } catch (error) {
      console.error('‚ùå [Test] Erro geral no teste da impressora:', error);
      return {
        success: false,
        message: `Erro de comunica√ß√£o no teste: ${error.message}`,
        error: error.message
      };
    }
  }

  /**
   * üìä OBTER STATUS DO SISTEMA
   */
  async getStatus(): Promise<PrinterStatus> {
    try {
      const response = await fetch(`${this.apiUrl}/printer/status`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Erro no status: ${response.status}`);
      }

      const result = await response.json();
      return result;

    } catch (error) {
      console.error('‚ùå Erro ao obter status:', error);
      return {
        success: false,
        totalPrinters: 0,
        activePrinters: 0,
        systemInfo: {
          error: error.message
        }
      };
    }
  }

  /**
   * üìÑ GERAR TEXTO DIN√ÇMICO PARA IMPRESS√ÉO COM FALLBACK ROBUSTO
   * Utiliza as configura√ß√µes de layout da p√°gina "Configurar Layout"
   */
  private generateDynamicPrintText(order: Order, layoutId?: string): string {
    try {
      let layout: PrintLayoutConfig | null = null;

      // üéØ PRIORIDADE 1: Usar layout espec√≠fico se fornecido
      if (layoutId) {
        layout = printLayoutService.getLayout(layoutId);
        if (layout) {
          // console.log(`üé® Usando layout espec√≠fico: ${layout.name} (ID: ${layout.id})`);
        } else {
          console.warn(`‚ö†Ô∏è Layout espec√≠fico ${layoutId} n√£o encontrado, usando padr√£o`);
        }
      }

      // üéØ PRIORIDADE 2: Verificar se existe layout customizado com placeholders
      if (!layout) {
        const customLayout = CustomLayoutService.getCustomLayout();
        const isDefaultCustomLayout = customLayout.includes('SEU RESTAURANTE') && customLayout.includes('PEDIDO #{id}');
        
        if (!isDefaultCustomLayout) {
          // console.log(`üé® Usando layout customizado com placeholders`);
          const processedText = CustomLayoutService.processLayout(order, customLayout);
          // console.log('‚úÖ Texto gerado com CustomLayoutService (placeholders)');
          return processedText;
        }
      }

      // üéØ PRIORIDADE 3: Se n√£o encontrou layout espec√≠fico nem customizado, usar padr√£o
      if (!layout) {
        layout = printLayoutService.getDefaultLayout();
        // console.log(`üè† Usando layout padr√£o: ${layout.name} (ID: ${layout.id})`);
      }

      if (!layout) {
        throw new Error('Nenhum layout dispon√≠vel');
      }

      // Gerar texto usando o servi√ßo de layout
      const dynamicText = printLayoutService.generatePrintText(order, layout);
      
      // console.log('‚úÖ Texto gerado dinamicamente com base nas configura√ß√µes');
      return dynamicText;

    } catch (error) {
      console.error('‚ùå ERRO na gera√ß√£o din√¢mica, usando fallback:', error);
      
      // FALLBACK ROBUSTO: Layout m√≠nimo funcional
      if (error instanceof RangeError || error.message.includes('Maximum call stack')) {
        console.warn('üîÑ Detectado stack overflow, usando fallback de emerg√™ncia');
        return this.generateEmergencyFallbackText(order);
      }
      
      // Para outros erros, tentar fallback simples
      try {
        return this.generateEmergencyFallbackText(order);
      } catch (fallbackError) {
        console.error('‚ùå Falha cr√≠tica no fallback:', fallbackError);
        throw new Error(`Falha total na impress√£o: ${error.message}`);
      }
    }
  }

  /**
   * üßπ SANITIZA√á√ÉO FINAL DO TEXTO DE IMPRESS√ÉO
   * Remove acentos, caracteres especiais e sequ√™ncia indesejada \x1DV\x41\x03
   */
  private sanitizePrintText(text: string, orderId: number): string {
    let sanitized = text;
    let accentosRemovidos = false;
    let seqRemovida = false;

    // 1. Remover sequ√™ncia indesejada \x1DV\x41\x03 e varia√ß√µes
    const originalLength = sanitized.length;
    sanitized = sanitized.replace(/\\x1DV\\x41\\x03/g, '');
    sanitized = sanitized.replace(/\x1D\x56\x41\x03/g, '');
    sanitized = sanitized.replace(/\\x1D V \\x41 \\x03/g, '');
    sanitized = sanitized.replace(/0x1D0x56\w*/g, '');
    if (sanitized.length !== originalLength) {
      seqRemovida = true;
    }

    // 2. Normalizar acentos e diacr√≠ticos
    const accentMap: { [key: string]: string } = {
      '√°': 'a', '√†': 'a', '√¢': 'a', '√£': 'a', '√§': 'a',
      '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e',
      '√≠': 'i', '√¨': 'i', '√Æ': 'i', '√Ø': 'i',
      '√≥': 'o', '√≤': 'o', '√¥': 'o', '√µ': 'o', '√∂': 'o',
      '√∫': 'u', '√π': 'u', '√ª': 'u', '√º': 'u',
      '√ß': 'c', '√±': 'n',
      '√Å': 'A', '√Ä': 'A', '√Ç': 'A', '√É': 'A', '√Ñ': 'A',
      '√â': 'E', '√à': 'E', '√ä': 'E', '√ã': 'E',
      '√ç': 'I', '√å': 'I', '√é': 'I', '√è': 'I',
      '√ì': 'O', '√í': 'O', '√î': 'O', '√ï': 'O', '√ñ': 'O',
      '√ö': 'U', '√ô': 'U', '√õ': 'U', '√ú': 'U',
      '√á': 'C', '√ë': 'N'
    };

    const beforeAccents = sanitized;
    for (const [accented, normal] of Object.entries(accentMap)) {
      sanitized = sanitized.replace(new RegExp(accented, 'g'), normal);
    }
    if (sanitized !== beforeAccents) {
      accentosRemovidos = true;
    }

    // 3. Substituir caracteres especiais problem√°ticos
    sanitized = sanitized.replace(/[""]/g, '"');  // Smart quotes
    sanitized = sanitized.replace(/['']/g, "'");  // Smart apostrophes
    sanitized = sanitized.replace(/[‚Äì‚Äî]/g, '-');  // Em/en dash
    sanitized = sanitized.replace(/[‚Ä¶]/g, '...');  // Ellipsis

    // 4. Remover caracteres de controle n√£o imprim√≠veis (exceto \n, \r)
    sanitized = sanitized.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '');

    // 5. Limpar barras/escapes problem√°ticos mantendo legibilidade
    sanitized = sanitized.replace(/\\x[0-9A-Fa-f]{2}/g, '');  // Remove hex escapes
    sanitized = sanitized.replace(/\\[^nr]/g, ' ');  // Remove escapes exceto \n \r

    // Log de sanitiza√ß√£o
    if (accentosRemovidos || seqRemovida) {
      // console.log(`sanitizacao_impressao: pedido=${orderId}, acentos_removidos=${accentosRemovidos}, seq_removida=${seqRemovida}`);
    }

    return sanitized;
  }

  /**
   * üö® FALLBACK DE EMERG√äNCIA - Layout m√≠nimo funcional
   */
  private generateEmergencyFallbackText(order: Order): string {
    // console.log('üö® Usando layout de emergencia para impress√£o');
    
    const lines = [];
    lines.push('='.repeat(32));
    lines.push('    PEDIDO DE ENTREGA');
    lines.push('='.repeat(32));
    lines.push('');
    lines.push(`Pedido: #${order.id}`);
    lines.push(`Data: ${new Date(order.created_at).toLocaleString('pt-BR')}`);
    lines.push('');
    lines.push('CLIENTE:');
    lines.push(order.nome_cliente || 'Nao informado');
    if (order.endereco) {
      lines.push(`Endereco: ${order.endereco}`);
    }
    lines.push('');
    lines.push('PEDIDO:');
    lines.push(order.pedido || 'Nao informado');
    if (order.observacoes) {
      lines.push(`Obs: ${order.observacoes}`);
    }
    lines.push('');
    lines.push('-'.repeat(32));
    if (order.tipo_pagamento) {
      lines.push(`Pagamento: ${order.tipo_pagamento}`);
    }
    lines.push(`TOTAL: R$ ${order.valor || '0,00'}`);
    lines.push('='.repeat(32));
    lines.push('  Obrigado pela preferencia!');
    lines.push('='.repeat(32));
    lines.push('');
    
    return lines.join('\n');
  }

  /**
   * ‚ùå REMOVIDO: Fallback hardcoded eliminado completamente
   * Sistema agora FALHA se n√£o houver configura√ß√£o din√¢mica
   */

  /**
   * üîÑ VERIFICAR CONEX√ÉO COM BACKEND
   */
  async checkConnection(): Promise<boolean> {
    try {
      const status = await this.getStatus();
      return status.success;
    } catch (error) {
      return false;
    }
  }
}

export const unifiedPrinterService = new UnifiedPrinterService();

