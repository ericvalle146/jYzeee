/**
 * CONFIGURA√á√ÉO DO SUPABASE PARA FRONTEND
 * 
 * Usa vari√°veis de ambiente para configura√ß√£o segura
 * Funciona tanto em desenvolvimento quanto em produ√ß√£o
 * Cliente singleton para evitar m√∫ltiplas inst√¢ncias
 */

import { createClient, SupabaseClient } from '@supabase/supabase-js';

// Configura√ß√µes do Supabase usando vari√°veis de ambiente
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
  console.error('Certifique-se de que VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY est√£o definidas no arquivo .env');
}

// Cliente Supabase singleton para evitar m√∫ltiplas inst√¢ncias
let supabaseInstance: SupabaseClient | null = null;

const getSupabaseClient = (): SupabaseClient => {
  if (!supabaseInstance) {
    console.log('üîß [Supabase] Criando nova inst√¢ncia do cliente');
    supabaseInstance = createClient(supabaseUrl, supabaseAnonKey, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: false
      },
      realtime: {
        params: {
          eventsPerSecond: 10
        }
      }
    });
  }
  return supabaseInstance;
};

// Cliente Supabase
export const supabase = getSupabaseClient();

// Configura√ß√µes exportadas para uso em outros lugares
export const SUPABASE_CONFIG = {
  url: supabaseUrl,
  anonKey: supabaseAnonKey,
  isConfigured: !!(supabaseUrl && supabaseAnonKey),
} as const;

// Fun√ß√£o para testar conectividade
export const testSupabaseConnection = async (): Promise<boolean> => {
  try {
    if (!SUPABASE_CONFIG.isConfigured) {
      console.warn('‚ö†Ô∏è Supabase n√£o configurado');
      return false;
    }

    const { data, error } = await supabase
      .from('pedidos')
      .select('id', { count: 'exact', head: true });
    
    if (error) {
      console.error('‚ùå Erro ao testar conex√£o Supabase:', error);
      return false;
    }

    console.log('‚úÖ Conex√£o Supabase OK');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao testar conex√£o Supabase:', error);
    return false;
  }
};

export default supabase;
